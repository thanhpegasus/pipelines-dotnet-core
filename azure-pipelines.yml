trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

parameters:
- name: environment
  displayName: 'Select Environment'
  type: string
  values:
    - prod
    - testing
    - dev
  default: 'dev'

- name: notificationEmail
  displayName: 'Notification Email'
  type: string
  default: ''  # Default to an empty string

- name: slackWebhookUrl
  displayName: 'Slack Webhook URL'
  type: string
  default: ''  # Default to an empty string

stages:
- stage: Build
  displayName: 'Build Application'
  condition: always()  # Prevents the stage from being rerun
  jobs:
  - job: DotNetBuild
    displayName: 'Run dotnet build command'
    steps:
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'
    
    # Assign a value to an output variable using Bash
    - bash: |
        selectedEnvironment=$(echo $(environment))
        echo "##vso[task.setvariable variable=SelectedEnvironment;isOutput=true]$selectedEnvironment"
      displayName: 'Set Output Variable'

- stage: Deploy
  displayName: 'Deploy Application'
  jobs:
  - deployment: Deploy
    displayName: 'Deploy .NET application'
    environment: 'YourEnvironmentName'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "Deployment is progressing to environment $(SelectedEnvironment)"
            displayName: 'Run shell script'

- stage: Notification
  displayName: 'Notification'
  dependsOn: Deploy
  jobs:
  - job: SendNotification
    displayName: 'Send Deployment Notification'
    steps:
    # Check if both notificationEmail and slackWebhookUrl are empty
    - bash: |
        if [[ -z "$(notificationEmail)" && -z "$(slackWebhookUrl)" ]]; then
          echo "Error: Both notificationEmail and slackWebhookUrl are empty."
          exit 1
        fi
      displayName: 'Check Notification Inputs'

    # Send email if notificationEmail is specified
    - task: SendEmail@1
      displayName: 'Send Email Notification'
      condition: and(succeeded(), ne(variables['notificationEmail'], ''))
      inputs:
        to: '$(notificationEmail)'
        subject: 'Deployment Completed'
        messageBody: 'The deployment to $(SelectedEnvironment) environment has been completed successfully.'

    # Send Slack message if slackWebhookUrl is specified
    - task: SlackMessage@1
      displayName: 'Send Slack Notification'
      condition: and(succeeded(), ne(variables['slackWebhookUrl'], ''))
      inputs:
        slackConnection: 'YourSlackServiceConnection'  # Create a Slack service connection in Azure DevOps
        channelName: '#your-channel'  # Specify your Slack channel
        message: 'Deployment to $(SelectedEnvironment) environment has been completed successfully.'
